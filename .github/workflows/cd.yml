name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  FORGE_VERSION: '0.2.0'

jobs:
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm build

      - name: Run smoke tests
        run: pnpm smoke-test

      - name: Deploy contracts to Base Sepolia
        run: pnpm deploy:sepolia
        env:
          RPC_URL_BASE_SEPOLIA: ${{ secrets.RPC_URL_BASE_SEPOLIA }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

      - name: Update deployment addresses
        run: |
          # This would update DEPLOYED_ADDRESSES.json with new contract addresses
          echo "Updating deployment addresses..."

      - name: Deploy console to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/console

      - name: Deploy indexer to Railway
        uses: railway-app/railway-deploy@v1
        with:
          railway-token: ${{ secrets.RAILWAY_TOKEN }}
          service: coinscious-indexer

      - name: Run integration tests
        run: pnpm test:integration
        env:
          STAGING_RPC_URL: ${{ secrets.STAGING_RPC_URL }}
          STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Staging deployment successful! üöÄ'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm build

      - name: Run production smoke tests
        run: pnpm smoke-test
        env:
          RPC_URL: ${{ secrets.PRODUCTION_RPC_URL }}

      - name: Deploy contracts to Base Mainnet
        run: pnpm deploy:mainnet
        env:
          RPC_URL_BASE_MAINNET: ${{ secrets.RPC_URL_BASE_MAINNET }}
          PRIVATE_KEY: ${{ secrets.PRODUCTION_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

      - name: Update production deployment addresses
        run: |
          # Update DEPLOYED_ADDRESSES.json with production addresses
          echo "Updating production deployment addresses..."

      - name: Deploy console to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./apps/console

      - name: Deploy indexer to Railway (Production)
        uses: railway-app/railway-deploy@v1
        with:
          railway-token: ${{ secrets.RAILWAY_TOKEN }}
          service: coinscious-indexer-prod

      - name: Run production integration tests
        run: pnpm test:integration
        env:
          PRODUCTION_RPC_URL: ${{ secrets.PRODUCTION_RPC_URL }}
          PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## What's Changed
            - Smart contract deployments
            - Console application updates
            - Indexer service updates
            - Security improvements
          draft: false
          prerelease: false

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment successful! üéâ Release: ${{ github.ref_name }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback (Manual)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback console to previous version
        run: |
          echo "Rolling back console to previous version..."

      - name: Rollback indexer to previous version
        run: |
          echo "Rolling back indexer to previous version..."

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          text: 'Rollback completed ‚ö†Ô∏è'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
